set nocompatible
filetype off

call plug#begin('~/.vim/plugged')
" VIM-PLUG itself
Plug 'junegunn/vim-plug'


" @ Plugin --- [ File Buffer Manager ]
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
"Plug 'w0rp/ale'
"Plug 'yegappan/mru'
"Plug 'danro/rename.vim'


" Quickly open files, buffers and MRU
Plug 'ctrlpvim/ctrlp.vim'

if has('gui_running')
else
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
endif

" Status Bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'bling/vim-bufferline'


" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'vim-scripts/gitignore'

" Undotree management
Plug 'mbbill/undotree'


" Tag view for current buffer
Plug 'majutsushi/tagbar'

" Easy Comment
Plug 'scrooloose/nerdcommenter'
Plug 'vim-scripts/DoxygenToolkit.vim'

" Code Complete
Plug 'Valloric/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', {'branch': 'stable'}

" Code Snippet
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Easy text editing
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'terryma/vim-multiple-cursors'
Plug 'vim-scripts/matchit.zip'
Plug 'godlygeek/tabular'

" Easy moving
" Colors
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'

" UI
Plug 'luochen1990/rainbow'
Plug 'kshenoy/vim-signature'
Plug 'nathanaelkane/vim-indent-guides'
"Plug 'ryanoasis/vim-devicons'

" Searching
Plug 'mileszs/ack.vim'

" Program utils
Plug 'ddcien/vim-gtags'
Plug 'Chiel92/vim-autoformat'
Plug 'derekwyatt/vim-fswitch'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'alisdair/vim-armasm'
Plug 'rust-lang/rust.vim'
Plug 'tpope/vim-rake'
Plug 'plasticboy/vim-markdown'
Plug 'freitass/todo.txt-vim'
Plug 'python-mode/python-mode', { 'branch': 'develop' }

" Misc
Plug 'mrmargolis/dogmatic.vim'
Plug 'mhinz/vim-startify'
Plug 'jaxbot/semantic-highlight.vim'
call plug#end()

filetype plugin indent on

" General
set mouse=a
set mousehide
set clipboard=unnamed,unnamedplus

" UI
set showmode
set cursorline
set colorcolumn=80

set number
set numberwidth=4

set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase

set wildmenu
set wildmode=list:longest,full

" command line
set ruler
set showcmd

" status line
set laststatus=2
set backspace=2

" formatting
set nowrap
set autoindent
set shiftwidth=4
set expandtab
set tabstop=4
set softtabstop=4
set nojoinspaces

set fileencodings=utf-8,gbk

" Backups
set directory=/tmp
set backupdir=~/.vim/backupdir
set backup

set undodir=~/.vim/undodir
set undofile
set undolevels=1000
set undoreload=10000

set foldmethod=syntax
set nofoldenable

set grepprg=rg\ --vimgrep

"set spell

nnoremap Y y$


" GUI
if has('gui_running')
    set guioptions=a
    set guifont=Anonymous\ Pro\ for\ Powerline\ Regular\ 12
endif
let g:solarized_termcolors = 256
set background=dark
let g:solarized_termtrans = 1
colorscheme solarized

syntax enable
syntax on

if isdirectory(expand("~/.vim/plugged/vim-indent-guides"))
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
endif

if isdirectory(expand("~/.vim/plugged/DoxygenToolkit.vim"))
    let g:DoxygenToolkit_authorName    = "Richard Lu <luqifeng@byhx-china.com>"
    let g:DoxygenToolkit_versionString = "v1.0.0"
endif

if isdirectory(expand("~/.vim/plugged/eclim"))
    let g:EclimCompletionMethod = 'omnifunc'
endif

if isdirectory(expand("~/.vim/plugged/vim-gtags"))
    let g:Gtags_Auto_Update       = 1
    let g:Gtags_Close_When_Single = 1
    nmap <C-]> :Gtags<CR><CR>
endif


if isdirectory(expand("~/.vim/plugged/vim-airline-themes"))
    let g:airline_powerline_fonts = 1
    let g:airline_theme = 'solarized'
endif

if isdirectory(expand("~/.vim/plugged/nerdtree"))
    let g:NERDShutUp=1
    let g:NERDTreeMinimalUI = 1
    let g:NERDTreeRespectWildIgnore = 1
    let g:NERDTreeQuitOnOpen=1

    map <C-e> :NERDTreeToggle<CR>
endif

if isdirectory(expand("~/.vim/plugged/matchit.zip"))
    let b:match_ignorecase = 1
endif

if isdirectory(expand("~/.vim/plugged/ack.vim"))
    let g:ackprg = 'rg --vimgrep'
endif

if isdirectory(expand("~/.vim/plugged/tagbar"))
    let g:tagbar_sort      = 0
    let g:tagbar_compact   = 1
    let g:tagbar_ctags_bin = "/usr/local/bin/ctags"
    nnoremap <silent> <leader>tt :TagbarToggle<CR>
endif

if isdirectory(expand("~/.vim/plugged/rainbow"))
    let g:rainbow_active = 1
endif

if isdirectory(expand("~/.vim/plugged/vim-fugitive"))
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>gp :Git push<CR>
    nnoremap <silent> <leader>gr :Gread<CR>
    nnoremap <silent> <leader>gw :Gwrite<CR>
    nnoremap <silent> <leader>ge :Gedit<CR>
    nnoremap <silent> <leader>gi :Git add -p %<CR>
endif

if isdirectory(expand("~/.vim/plugged/ctrlp.vim/"))
    let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_custom_ignore = {
                \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
    let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
    let g:ctrlp_user_command = {
                \ 'types': {
                \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                \ },
                \ 'fallback': s:ctrlp_fallback
                \ }
endif

if isdirectory(expand("~/.vim/plugged/YouCompleteMe"))
    set completeopt-=preview

    " UltiSnips
    let g:ycm_use_ultisnips_completer  = 1
    let g:UltiSnipsExpandTrigger       = '<C-j>'
    let g:UltiSnipsJumpForwardTrigger  = '<C-j>'
    let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

    let g:ycm_complete_in_comments                          = 1
    let g:ycm_complete_in_strings                           = 1
    let g:ycm_collect_identifiers_from_comments_and_strings = 0
    let g:ycm_collect_identifiers_from_tags_files           = 0
    let g:ycm_seed_identifiers_with_syntax                  = 1

    let g:ycm_add_preview_to_completeopt                = 1
    let g:ycm_autoclose_preview_window_after_completion = 0
    let g:ycm_autoclose_preview_window_after_insertion  = 1

    let g:ycm_always_populate_location_list = 1

    let g:ycm_goto_buffer_command = 'same-buffer'
    let g:ycm_show_diagnostics_ui = 1
    let g:ycm_cache_omnifunc      = 1

    let g:ycm_extra_conf_vim_data   = [ '&filetype' ]
    let g:ycm_python_binary_path = '/usr/bin/python3'
    "let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
    "let g:ycm_confirm_extra_conf    = 0

    nnoremap <silent> <leader>gg :YcmCompleter GoTo<CR>
    nnoremap <silent> <leader>rr :YcmCompleter GetReferences<CR>
    nnoremap <silent> <leader>ff :YcmCompleter FixIt<CR>
    "nnoremap <silent> <leader>tt :YcmCompleter GetType<CR>
endif

if isdirectory(expand("~/.vim/plugged/python-mode"))
    let g:pymode_python = 'python3'
endif

if isdirectory(expand("~/.vim/plugged/undotree"))
    let g:undotree_SetFocusWhenToggle = 1
    nnoremap <silent> <leader>uu :UndotreeToggle<CR>
endif

if isdirectory(expand("~/.vim/plugged/vim-startify"))
    let g:startify_change_to_dir = 0
    let g:startify_change_to_vcs_root = 1
    let g:startify_padding_left = 3
    let g:startify_update_oldfiles = 1
    let g:startify_session_autoload = 1
    let g:startify_session_persistence = 1
    let g:startify_session_delete_buffers = 1
    let g:startify_list_order = [ 'sessions', 'files', 'dir', 'bookmarks', 'commands']
endif

augroup project
    autocmd!
    autocmd BufRead,BufNewFile *.[ch] set filetype=c
    autocmd BufRead,BufNewFile *.[sS] set filetype=armasm
augroup END

function! ResCur()
    if line("'\"") <= line("$")
        silent! normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre <buffer> call StripTrailingWhitespace()
nmap <Leader>y :!echo --==<C-R><C-w>==-- ;ici <C-R><C-W><CR>
